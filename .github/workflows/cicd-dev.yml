name: Java CI/CD with Gradle

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Cache directories creation
        run: |
          mkdir -p ~/.gradle/caches
          mkdir -p ~/.gradle/wrapper

      - name: Gradle caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ hashFiles('gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            ${{ runner.os }}-
            gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create application-dev.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.OAUTH }}" > ./src/main/resources/oauth.yml
          echo "${{ secrets.PROPERTIES_DEV }}" > ./src/main/resources/application-dev.yml
        shell: bash

      - name: Set Yaml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-dev.yml
        env:
          spring.datasource.url: ${{ secrets.MYSQL_URL }}
          spring.datasource.username: ${{ secrets.MYSQL_USERNAME }}
          spring.datasource.password: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          jwt.secret.key: ${{ secrets.JWT_KEY }}
          cloud.aws.s3.bucket: ${{ secrets.AWS_BUCKET }}
          cloud.aws.region.static: ${{ secrets.AWS_REGION }}
          cloud.aws.credentials.accessKey: ${{ secrets.AWS_ACCESS_KEY }}
          cloud.aws.credentials.secretKey: ${{ secrets.AWS_SECRET_KEY }}

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean bootJar

      - name: Log in to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_DEV_IMAGE }} -f Dockerfile.dev .
          docker push ${{ secrets.DOCKER_DEV_IMAGE }}

      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            export DOCKER_DEV_IMAGE=${{ secrets.DOCKER_DEV_IMAGE }}
            export MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            export MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
            export MYSQL_URL=${{ secrets.MYSQL_URL }}
            export MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            echo "DOCKER_DEV_IMAGE=${DOCKER_DEV_IMAGE}" > /home/ubuntu/compose/.env
            echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" >> /home/ubuntu/compose/.env
            echo "MYSQL_USERNAME=${MYSQL_USERNAME}" >> /home/ubuntu/compose/.env
            echo "MYSQL_URL=${MYSQL_URL}" >> /home/ubuntu/compose/.env
            echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> /home/ubuntu/compose/.env
            cd /home/ubuntu/compose
            sudo docker compose down  
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}  
            sudo docker pull ${{ secrets.DOCKER_DEV_IMAGE }}
            sudo docker compose -f docker-compose.dev.yml up -d
            sudo docker image prune -f